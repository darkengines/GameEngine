#version 460
#extension GL_EXT_nonuniform_qualifier: enable
#extension GL_KHR_vulkan_glsl: enable

#include "./SkinningInput.glsl"
#include "./VertexWeight.glsl"
#include "./Bone.glsl"
#include "../../Graphics/Shaders/StoreItemLocation.glsl"
#include "../../Spatials/shaders/Spatial.glsl"
#include "../../Objects/shaders/Object.glsl"


layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout (set = 0, binding = 0, std430) readonly buffer inputLayout {
    SkinningInput[] skinningInputs;
} skinningInputBuffer[];
layout (set = 1, binding = 0) readonly buffer spatialLayout {
    Spatial[] spatials;
} spatialBuffer[];
layout (set = 1, binding = 0) readonly buffer objectLayout {
    Object[] objects;
} objectBuffer[];
layout (set = 1, binding = 0) readonly buffer boneLayout {
    Bone[] bones;
} boneBuffer[];

struct Vertex {
	vec4 position;
	vec4 normal;
	vec4 tangent;
	vec4 bitangent;
	vec4 diffuseColor;
	vec4 textureCoordinates;
};

layout (set = 2, binding = 0, std430) buffer vertexLayout {
    Vertex[] vertices;
} vertexBuffer[];

layout (set = 3, binding = 0) readonly buffer weightLayout {
    VertexWeight[] vertexWeights;
} vertexWeightBuffer[];

void main() {
    uint index = gl_GlobalInvocationID.x;
    SkinningInput skinningInput = skinningInputBuffer[0].skinningInputs[index];
    Object object = objectBuffer[skinningInput.objectItemLocation.storeIndex].objects[skinningInput.objectItemLocation.itemIndex];
    Bone bone = boneBuffer[skinningInput.boneItemLocation.storeIndex].bones[skinningInput.boneItemLocation.itemIndex];
    Spatial spatial = spatialBuffer[object.spatialItemLocation.storeIndex].spatials[object.spatialItemLocation.itemIndex];
    VertexWeight vertexWeight = vertexWeightBuffer[skinningInput.vertexWeightItemLocation.storeIndex].vertexWeights[skinningInput.vertexWeightItemLocation.itemIndex];
    Vertex inputVertex = vertexBuffer[skinningInput.vertexItemLocation.storeIndex].vertices[skinningInput.vertexItemLocation.itemIndex];
    Vertex outputVertex = vertexBuffer[skinningInput.skinnedVertexItemLocation.storeIndex].vertices[skinningInput.skinnedVertexItemLocation.itemIndex];
    vertexBuffer[skinningInput.skinnedVertexItemLocation.storeIndex].vertices[skinningInput.skinnedVertexItemLocation.itemIndex].position = vertexWeight.weight * spatial.model * bone.spatialOffset.model * inputVertex.position;
}