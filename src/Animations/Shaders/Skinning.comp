#version 460
#extension GL_EXT_nonuniform_qualifier: enable

#include "./SkinnedVertexRange.glsl"
#include "./BoneInstanceWeight.glsl"
#include "./Bone.glsl"
#include "../../Graphics/Shaders/StoreItemLocation.glsl"
#include "../../Spatials/shaders/Spatial.glsl"
#include "../../Nodes/shaders/Node.glsl"
#include "../../Meshes/shaders/Vertex.glsl"


layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout(push_constant) uniform optionsLayout {
    uint bufferIndex;
    uint offset;
    uint l;
} options;

layout (set = 0, binding = 0, std430) readonly buffer skinnedVertexRangeLayout {
    SkinnedVertexRange[] skinnedVertexRanges;
} skinnedVertexRangeBuffer[];
layout (set = 1, binding = 0, std430) readonly buffer boneInstanceWeightLayout {
    BoneInstanceWeight[] boneInstanceWeights;
} boneInstanceWeightBuffer[];
layout (set = 2, binding = 0, std430) buffer vertexLayout {
    Vertex[] vertices;
} vertexBuffer[];
layout (set = 3, binding = 0, std430) buffer skinnedVertexLayout {
    Vertex[] vertices;
} skinnedVertexBuffer[];
layout (set = 4, binding = 0) readonly buffer spatialLayout {
    Spatial[] spatials;
} spatialBuffer[];
layout (set = 4, binding = 0) readonly buffer nodeLayout {
    Node[] nodes;
} nodeBuffer[];
layout (set = 4, binding = 0) readonly buffer boneLayout {
    Bone[] bones;
} boneBuffer[];

void main() {
    uint index = gl_GlobalInvocationID.x;
    if (index >= options.l) return;
    SkinnedVertexRange skinnedVertexRange = skinnedVertexRangeBuffer[options.bufferIndex].skinnedVertexRanges[options.offset + index];
    Vertex inputVertex = vertexBuffer[skinnedVertexRange.vertexBufferIndex].vertices[skinnedVertexRange.vertexBufferItemOffset + skinnedVertexRange.vertexIndex];

    BoneInstanceWeight boneInstanceWeight = boneInstanceWeightBuffer[skinnedVertexRange.vertexWeightBufferIndex].boneInstanceWeights[skinnedVertexRange.vertexWeightBufferItemOffset + skinnedVertexRange.vertexWeightIndex];
    Bone bone = boneBuffer[boneInstanceWeight.boneStoreItemLocation.storeIndex].bones[boneInstanceWeight.boneStoreItemLocation.itemIndex];
    Node node = nodeBuffer[boneInstanceWeight.boneInstanceStoreItemLocation.storeIndex].nodes[boneInstanceWeight.boneInstanceStoreItemLocation.itemIndex];
    Spatial spatial = spatialBuffer[boneInstanceWeight.boneInstanceSpatialStoreItemLocation.storeIndex].spatials[boneInstanceWeight.boneInstanceSpatialStoreItemLocation.itemIndex];

    vec4 position = boneInstanceWeight.weight * spatial.model * bone.spatialOffset.model * inputVertex.position;
    vec4 normal = boneInstanceWeight.weight * spatial.model * bone.spatialOffset.model * inputVertex.normal;
    vec4 tangent = boneInstanceWeight.weight * spatial.model * bone.spatialOffset.model * inputVertex.tangent;
    vec4 bitangent = boneInstanceWeight.weight * spatial.model * bone.spatialOffset.model * inputVertex.bitangent;

    for (uint boneInstanceWeightIndex = 1; boneInstanceWeightIndex < skinnedVertexRange.vertexWeightCount; boneInstanceWeightIndex++) {
        BoneInstanceWeight boneInstanceWeight = boneInstanceWeightBuffer[skinnedVertexRange.vertexWeightBufferIndex].boneInstanceWeights[skinnedVertexRange.vertexWeightBufferItemOffset + skinnedVertexRange.vertexWeightIndex + boneInstanceWeightIndex];
        Bone bone = boneBuffer[boneInstanceWeight.boneStoreItemLocation.storeIndex].bones[boneInstanceWeight.boneStoreItemLocation.itemIndex];
        Node node = nodeBuffer[boneInstanceWeight.boneInstanceStoreItemLocation.storeIndex].nodes[boneInstanceWeight.boneInstanceStoreItemLocation.itemIndex];
        Spatial spatial = spatialBuffer[boneInstanceWeight.boneInstanceSpatialStoreItemLocation.storeIndex].spatials[boneInstanceWeight.boneInstanceSpatialStoreItemLocation.itemIndex];

        position += boneInstanceWeight.weight * spatial.model * bone.spatialOffset.model * inputVertex.position;
        normal += boneInstanceWeight.weight * spatial.model * bone.spatialOffset.model * inputVertex.normal;
        tangent += boneInstanceWeight.weight * spatial.model * bone.spatialOffset.model * inputVertex.tangent;
        bitangent += boneInstanceWeight.weight * spatial.model * bone.spatialOffset.model * inputVertex.bitangent;
    }

    skinnedVertexBuffer[skinnedVertexRange.skinnedVertexBufferIndex].vertices[skinnedVertexRange.skinnedVertexBufferItemOffset + skinnedVertexRange.skinnedVertexIndex].position = position;
    skinnedVertexBuffer[skinnedVertexRange.skinnedVertexBufferIndex].vertices[skinnedVertexRange.skinnedVertexBufferItemOffset + skinnedVertexRange.skinnedVertexIndex].normal = normal;
    skinnedVertexBuffer[skinnedVertexRange.skinnedVertexBufferIndex].vertices[skinnedVertexRange.skinnedVertexBufferItemOffset + skinnedVertexRange.skinnedVertexIndex].tangent = tangent;
    skinnedVertexBuffer[skinnedVertexRange.skinnedVertexBufferIndex].vertices[skinnedVertexRange.skinnedVertexBufferItemOffset + skinnedVertexRange.skinnedVertexIndex].bitangent = bitangent;
}